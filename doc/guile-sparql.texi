\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename guile-sparql.info
@documentencoding UTF-8
@settitle Guile-SPARQL
@afourwide
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2018 Roel Janssen@*
Copyright @copyright{} 2019, 2020 Giacomo Leidi@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-SPARQL: (guile-sparql).  Create and execute SPARQL queries with Guile.
@end direntry

@titlepage
@title Guile-SPARQL reference manual
@subtitle Create and execute SPARQL queries with Guile.
@author Roel Janssen

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Guile-SPARQL

This document describes the Guile-SPARQL module for version @value{VERSION}.

@menu
* Introduction::                What is this all about?
* Installation::                Installing guile-sparql.
* API Reference::               Description of the interface.
* GNU Free Documentation License::  The license of this manual.
* Concept Index::               Concepts.
* Programming Index::           Data types, functions, and variables.

@detailmenu
 --- The Detailed Node Listing ---

API Reference

* Querying remote endpoints::          Interacting with SPARQL endpoints.
* SPARQL queries as S-expressions::    Scheme-ify SPARQL queries.
* Convenience functions::              Quickly work with query results.

@end detailmenu
@end menu

@c *********************************************************************
@node Introduction
@chapter Introduction

This package provides the functionality to query a SPARQL endpoint.
Additionally, it provides an interface to write SPARQL queries using
S-expressions.

It consists of three modules: @code{(sparql driver)}, @code{(sparql lang)},
and @code{(sparql util)}.

@c *********************************************************************
@node Installation
@chapter Installation

Guile-SPARQL uses the GNU build system.  To install it from a release
tarball just unpack it and run the usual commands:

@verbatim
./configure
make
make install
@end verbatim

If you want to build the sources from the source repository you need to
bootstrap the build system first.  Run @code{autoreconf -vif} first and
then perform the above steps.

@node API Reference
@chapter API Reference

@node Querying remote endpoints
@section Querying remote endpoints

The @code{(sparql driver)} module provides the ability to perform SPARQL
queries over HTTP with the @code{sparql-query} function.

@deffn {Scheme Procedure} sparql-query @var{query} [#:host @var{host} @
  #:port @var{port} @
  #:type @code{"text/csv"} @
  #:store-backend @code{'virtuoso} @
  #:namespace @code{#f} @
  #:token @code{#f} @
  #:digest-auth @code{#f}]
Send @var{query} to @var{host} on port @var{port}.  The default @var{host}
is @code{localhost}, and the default port is @code{8890}.
@end deffn

@subsection Triple-store specific implementations

Known @emph{triple stores} use slightly incompatible ways to communicate a
SPARQL query over HTTP.  Furthermore, authentication is implemented differently
between @emph{triple store} implementations.

The @code{(sparql driver)} module therefore implements three variants of
querying over HTTP, supporting the implementations of @emph{Virtuoso},
@emph{4store}, and @emph{BlazeGraph}.

The default back-end is Virtuoso.

@subsubsection Querying Virtuoso endpoints

This module can query Virtuoso endpoints using three methods:
@emph{unauthenticated}, @emph{OAuth token-based authentication}, and
@emph{digest authentication}.

If the endpoint needs no authentication, don't set @code{#:token} or
@code{#:digest-auth}.  For token-based authentication, pass the token as a
string using the @code{#:token} keyword.  To use digest authentication,
pass the username and password, separated by a colon using the
@code{#:digest-auth} keyword.

The following examples show how to query a Virtuoso endpoint in three ways:

@lisp
;; No authentication required.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}")

;; Token-based authentication.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}"
              #:token "4bc17fb4ac225cad5ee52f7d42433446")

;; Digest authentication.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}"
              #:digest-auth "dba:dba")
@end lisp

@subsubsection Querying 4store endpoints

The 4store triple store implements a token-based authentication mechanism.
The following examples show how to query a 4store endpoint in two ways:

@lisp
;; No authentication required.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}"
              #:store-backend '4store)

;; Token-based authentication.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}"
              #:store-backend '4store
              #:token "4bc17fb4ac225cad5ee52f7d42433446")
@end lisp

@subsubsection Querying BlazeGraph endpoints

This module does not implement authentication for BlazeGraph endpoints.

BlazeGraph provides specific endpoint URLs for each @emph{namespace}.
Therefore, querying a BlazeGraph endpoint requires setting the
@code{#:namespace} property.  When @code{#:store-backend} is set to
@code{'blazegraph}, the default namespace is set to @code{kb}.  Use the
@code{#:namespace} keyword to query a different namespace.

The following examples show how to query a BlazeGraph endpoint, using the
default namespace, and using a non-default namespace.

@lisp
;; Perform the query on the "kb" namespace.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}"
              #:store-backend 'blazegraph)

;; Perform the query in the "example" namespace.
(sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}"
              #:store-backend 'blazegraph
              #:namespace 'example)
@end lisp

@node SPARQL queries as S-expressions
@section SPARQL queries as S-expressions

The @code{(sparql lang)} module provides functions to write SPARQL queries
using S-expressions.

@deffn {Scheme Procedure} select @var{columns} @var{pattern} [#:graph #f @
  #:suffix #f @ #:named #f @ #:distinct #f]
Returns a SPARQL query as a string with the @var{columns} and @var{pattern}s.
@end deffn

@deffn {Scheme Procedure} construct @var{template} @var{pattern} [#:graph #f @
  #:suffix #f @ #:named #f]
Returns a SPARQL query as a string with the @var{template} and @var{pattern}s.
@end deffn

@deffn {Scheme Procedure} describe @var{columns} [#:pattern #f @ #:graph #f @
  #:suffix #f @ #:named #f]
Returns a SPARQL query as a string with the @var{columns} and @var{pattern}s.
@end deffn

@deffn {Scheme Procedure} ask @var{pattern} [#:graph #f @
  #:suffix #f @ #:named #f]
Returns a SPARQL query as a string with the given @var{pattern}.
@end deffn

@deffn {Scheme Procedure} insert-data @var{pattern} [#:graph #f @
  #:suffix #f]
Returns a SPARQL query to insert the triplets described in @var{pattern}.
@end deffn

@deffn {Scheme Procedure} delete-data @var{pattern} [#:graph #f @
  #:suffix #f]
Returns a SPARQL query to remove the triplets described in @var{pattern}.
@end deffn

@noindent
The results of the functions in this module can be captured using
@code{(ice-9 receive)}.  Two values are returned; the HTTP header in the
form of the @code{(web response)} module, and a port from which the query
results can be read.  The following example displays what this looks like.

@lisp
(use-modules (ice-9 rdelim)
             (ice-9 format)
             (ice-9 receive))

(define (display-query-results port)
  (let ((line (read-line port)))
    (if (eof-object? line)
        #t
        ;; The default output format is comma-separated values (CSV).
        (let ((tokens (string-split line #\,)))
          (format #t "~@{~a~/~@}~%" tokens)
          (display-query-results port)))))

(receive (header port)
    (sparql-query "SELECT ?s ?p ?o @{ ?s ?p ?o @}")
  (if (= (response-code header) 200)
    (display-query-results port)
    (format #t "Error: The server responded in err.~%")))
@end lisp

@node Example of a @code{SELECT} query
@subsection Example of a @code{SELECT} query

The following query:
@lisp
(let ((rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#"))
      (lcl (prefix "http://ex/")))
  (select '(s p o) `((s p o)
                     (s ,(rdf "type") ,(lcl "ample")))))
@result{}
"SELECT ?s ?p ?o
@{
  ?s ?p ?o .
  ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ex/ample> .
@}"
@end lisp

@noindent
So, it can be combined with @code{sparql-query} this way:
@lisp
(sparql-query
  (let ((rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#"))
        (lcl (prefix "http://localhost/")))
    (select '(s p o) `((s p o)
                       (s ,(rdf "type") ,(lcl "Example"))))))
@end lisp

@noindent
Note that the @code{let}-binding of the prefixes may also be on the
outside of @code{sparql-query}.

@node Example of a @code{CONSTRUCT} query
@subsection Example of a @code{CONSTRUCT} query

The following query:
@lisp
(let ((ex (prefix "http://example.org/"))
      (rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#")))
  (construct `((s ,(rdf "type") o))
             `((s ,(ex "type") o))
             `((limit "20"))))
@result{}
"CONSTRUCT
@{
  ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?o .
@}
WHERE
@{
  ?s <http://example.org/type> ?o .
@}
LIMIT 20"
@end lisp

@node Example of a @code{DESCRIBE} query

@subsection Example of a @code{DESCRIBE} query

The following query:
@lisp
(let ((ex (prefix "http://example.org/"))
      (rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#")))
  (describe `(s o ,(ex "Thing"))
             `((s ,(ex "type") o))
             `((limit "20"))))
@result{}
"DESCRIBE ?s ?o <http://example.org/Thing>
WHERE
@{
   ?s <http://example.org/type> ?o .
@}
LIMIT 20"
@end lisp

@node Example of a @code{ASK} query
@subsection Example of an @code{ASK} query

The following query:
@lisp
(let ((ex (prefix "http://example.org/"))
      (owl (prefix "http://www.w3.org/2002/07/owl#"))
      (rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#")))
  (ask `((s ,(rdf "type") ,(owl "Thing"))
         (minus ((s ,(rdf "type") ,(ex "Thing")))))))
@result{}
"ASK
@{
  ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Thing> .
  MINUS
  @{
    ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/Thing> .
  @}
@}
"
@end lisp

@node Convenience functions
@section Convenience functions

The functions in @code{(sparql util)} make handling query results
easier.

@deffn {Scheme Procedure} display-query-results-of @var{query}
Writes CSV data from @var{query} to the standard output port, where
@var{query} is a call to @code{sparql-query}.
@end deffn

@deffn {Scheme Procedure} query-results->list @var{query}
Returns the resulting table of @var{query} as a list, where
@var{query} is a call to @code{sparql-query}.
@end deffn

@noindent
To expand the example of the @code{(sparql lang)} module, the following
two examples show how results can be displayed or stored as a list.

@noindent
To write the results to the standard output port:
@lisp
(display-query-results-of
  (sparql-query
    (let ((rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#"))
          (lcl (prefix "http://localhost/")))
      (select '(s p o) `((s p o)
                         (s ,(rdf "type") ,(lcl "Example")))))))
@end lisp

@noindent
To store the results in a list:
@lisp
(define results
  (query-results->list
    (sparql-query
      (let ((rdf (prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#"))
            (lcl (prefix "http://localhost/")))
        (select '(s p o) `((s p o)
                           (s ,(rdf "type") ,(lcl "Example"))))))))
@end lisp

@subsection Working with comma-separated values

The naive way to parse comma-separated values is to do something
equivalent to @code{(string-split line #\,)}, where @code{line} is a
line of the comma-separated data.  This works fine until one of the
values contains a comma, and is encapsulated in double quotes.

@deffn {Scheme Procedure} split-line @var{line} [@var{delimiter}]
Splits a string on a delimiter, like @code{string-split}, but ignores
the delimiter when it occurs inside double quotes.
@end deffn

@noindent
The following example also shows that @code{split-line} keeps
the double quotes.  These can be trimmed using
@code{string-trim-both}.

@lisp
(split-line "One,\"two, three\",four")
@result{} ("One" "\"two, three\"" "four")
@end lisp

The default delimiter is a comma, but a different delimiter can be
passed as a second argument.

@lisp
(split-line "One;two;three;four" #\;)
@result{} ("One" "two" "three" "four")
@end lisp

@subsection Working with URIs

@deffn {Scheme Procedure} uri-suffix @var{uri}
Returns the suffix of @var{uri} so that the protocol, hostname, and
parent directories are removed.
@end deffn

@lisp
(uri-suffix "http://gnu.org/software/guile")
@result{} "guile"
@end lisp

@deffn {Scheme Procedure} uri-base @var{uri}
Returns the @var{uri} without the suffix returned by @code{uri-suffix}.
@end deffn

@lisp
(uri-base "http://gnu.org/software/guile")
@result{} "http://gnu.org/software/"
@end lisp

@c *********************************************************************
@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@page

@c *********************************************************************
@node Concept Index
@unnumbered Concept Index

@printindex cp

@node Programming Index
@unnumbered Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@bye
